{"version":3,"sources":["types/enum.ts","components/Header.tsx","assets/icon-settings.svg","assets/icon-close.svg","components/Settings.tsx","components/Timer.tsx","App.tsx","index.tsx"],"names":["Mode","Font","Color","Header","currentMode","setCurrentMode","btnClassName","mode","className","POMODORO","onClick","SHORT_BREAK","LONG_BREAK","Settings","timer","setTimer","currentFont","currentColor","setCurrentFont","setCurrentColor","useState","isOpen","setIsOpen","newColor","setNewColor","newFont","setNewFont","pomodoro","shortBreak","longBreak","newTimer","setNewTimer","btnClassNameFont","font","btnClassNameColor","color","handleChangeTimer","e","target","name","parseInt","value","src","iconSettings","alt","iconClose","console","log","type","min","onChange","KUMHB_SANS","ROBOTO_SLAB","SPACE_MONO","SALMON","CYAN","PURPLE","Timer","refCount","useRef","cx","cy","r","strokeDasharray","strokeDashoffset","ref","App","htmlTag","document","body","parentNode","useEffect","setAttribute","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c04eb1eb.chunk.js","sourcesContent":["export enum Mode {\r\n\tPOMODORO,\r\n\tSHORT_BREAK,\r\n\tLONG_BREAK,\r\n}\r\n\r\nexport enum Font {\r\n\tKUMHB_SANS = 'KUMHB_SANS',\r\n\tROBOTO_SLAB = 'ROBOTO_SLAB',\r\n\tSPACE_MONO = 'SPACE_MONO',\r\n}\r\n\r\nexport enum Color {\r\n\tSALMON = 'SALMON',\r\n\tCYAN = 'CYAN',\r\n\tPURPLE = 'PURPLE',\r\n}\r\n","import React from 'react';\r\nimport { Mode } from '../types/enum';\r\ninterface IProps {\r\n\tcurrentMode: Mode;\r\n\tsetCurrentMode: (arg: Mode) => void;\r\n}\r\n\r\nconst Header = ({ currentMode, setCurrentMode }: IProps) => {\r\n\tconst btnClassName = (mode: Mode) => {\r\n\t\treturn `header__button ${currentMode === mode ? 'header__button--active' : ''}`;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"header\">\r\n\t\t\t<h1>pomodoro</h1>\r\n\t\t\t<div className=\"header__buttons\">\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={btnClassName(Mode.POMODORO)}\r\n\t\t\t\t\tonClick={() => setCurrentMode(Mode.POMODORO)}>\r\n\t\t\t\t\tpomodoro\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={btnClassName(Mode.SHORT_BREAK)}\r\n\t\t\t\t\tonClick={() => setCurrentMode(Mode.SHORT_BREAK)}>\r\n\t\t\t\t\tshort break\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={btnClassName(Mode.LONG_BREAK)}\r\n\t\t\t\t\tonClick={() => setCurrentMode(Mode.LONG_BREAK)}>\r\n\t\t\t\t\tlong break\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","export default __webpack_public_path__ + \"static/media/icon-settings.e0a317db.svg\";","export default __webpack_public_path__ + \"static/media/icon-close.79cfecaf.svg\";","import React, { useState } from 'react';\r\nimport iconSettings from '../assets/icon-settings.svg';\r\nimport iconClose from '../assets/icon-close.svg';\r\nimport { Color, Font } from '../types/enum';\r\nimport { Count } from '../types/types';\r\n\r\ninterface IProps {\r\n\ttimer: Count;\r\n\tcurrentFont: string;\r\n\tcurrentColor: string;\r\n\tsetTimer: (arg: Count) => void;\r\n\tsetCurrentFont: (arg: any) => void;\r\n\tsetCurrentColor: (arg: any) => void;\r\n}\r\n\r\nconst Settings = ({\r\n\ttimer,\r\n\tsetTimer,\r\n\tcurrentFont,\r\n\tcurrentColor,\r\n\tsetCurrentFont,\r\n\tsetCurrentColor,\r\n}: IProps) => {\r\n\tconst [isOpen, setIsOpen] = useState(false);\r\n\tconst [newColor, setNewColor] = useState(currentColor);\r\n\tconst [newFont, setNewFont] = useState(currentFont);\r\n\tconst [newTimer, setNewTimer] = useState({\r\n\t\tpomodoro: timer.pomodoro,\r\n\t\tshortBreak: timer.shortBreak,\r\n\t\tlongBreak: timer.longBreak,\r\n\t});\r\n\tlet btnClassNameFont = (font: Font) => {\r\n\t\treturn `${newFont === font ? 'active' : ''}`;\r\n\t};\r\n\r\n\tconst btnClassNameColor = (color: Color) => {\r\n\t\treturn `${newColor === color ? 'active' : ''}`;\r\n\t};\r\n\r\n\t// == CLOSE MODAL\r\n\tconst handleClose = (): void => {\r\n\t\tsetIsOpen(false);\r\n\t\tsetNewTimer({\r\n\t\t\tpomodoro: timer.pomodoro,\r\n\t\t\tshortBreak: timer.shortBreak,\r\n\t\t\tlongBreak: timer.longBreak,\r\n\t\t});\r\n\t\tsetNewColor(currentColor);\r\n\t\tsetCurrentFont(currentFont);\r\n\t\tconsole.log(currentFont);\r\n\t};\r\n\r\n\tconst handleChangeTimer = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetNewTimer({\r\n\t\t\t...newTimer,\r\n\t\t\t[e.target.name]: parseInt(e.target.value),\r\n\t\t});\r\n\t};\r\n\r\n\t// == APPLY\r\n\tconst handleApply = () => {\r\n\t\tsetIsOpen(false);\r\n\t\tsetTimer(newTimer);\r\n\t\tsetCurrentColor(newColor);\r\n\t\tsetCurrentFont(newFont);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"settings\">\r\n\t\t\t{/* ICON */}\r\n\t\t\t<img src={iconSettings} alt=\"icon settings\" onClick={() => setIsOpen(true)} />\r\n\r\n\t\t\t{/* Modal  */}\r\n\t\t\t{isOpen && (\r\n\t\t\t\t<div className=\"settings__content\">\r\n\t\t\t\t\t{/* HEADER */}\r\n\t\t\t\t\t<div className=\"settings__content__header\">\r\n\t\t\t\t\t\t<h3>Settings</h3>\r\n\t\t\t\t\t\t<img src={iconClose} alt=\"icon close\" onClick={handleClose} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{/* TIME */}\r\n\t\t\t\t\t<div className=\"settings__content__time\">\r\n\t\t\t\t\t\t<span className=\"settings__content__category--title\">\r\n\t\t\t\t\t\t\tTIME (MINUTES)\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<div className=\"settings__content__time__content\">\r\n\t\t\t\t\t\t\t<div className=\"settings__content__time__content__input-wrapper\">\r\n\t\t\t\t\t\t\t\t<label>pomodoro</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tname=\"pomodoro\"\r\n\t\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\t\tmin=\"1\"\r\n\t\t\t\t\t\t\t\t\tvalue={newTimer.pomodoro}\r\n\t\t\t\t\t\t\t\t\tonChange={handleChangeTimer}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"settings__content__time__content__input-wrapper\">\r\n\t\t\t\t\t\t\t\t<label>short break</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tname=\"shortBreak\"\r\n\t\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\t\tmin=\"1\"\r\n\t\t\t\t\t\t\t\t\tvalue={newTimer.shortBreak}\r\n\t\t\t\t\t\t\t\t\tonChange={handleChangeTimer}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"settings__content__time__content__input-wrapper\">\r\n\t\t\t\t\t\t\t\t<label>long break</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\tname=\"longBreak\"\r\n\t\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\t\tmin=\"1\"\r\n\t\t\t\t\t\t\t\t\tvalue={newTimer.longBreak}\r\n\t\t\t\t\t\t\t\t\tonChange={handleChangeTimer}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{/* FONT */}\r\n\t\t\t\t\t<div className=\"settings__content__font\">\r\n\t\t\t\t\t\t<span className=\"settings__content__category--title\">FONT</span>\r\n\t\t\t\t\t\t<div className=\"settings__content__font__content\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName={btnClassNameFont(Font.KUMHB_SANS)}\r\n\t\t\t\t\t\t\t\tonClick={() => setNewFont(Font.KUMHB_SANS)}>\r\n\t\t\t\t\t\t\t\tAa\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName={btnClassNameFont(Font.ROBOTO_SLAB)}\r\n\t\t\t\t\t\t\t\tonClick={() => setNewFont(Font.ROBOTO_SLAB)}>\r\n\t\t\t\t\t\t\t\tAa\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName={btnClassNameFont(Font.SPACE_MONO)}\r\n\t\t\t\t\t\t\t\tonClick={() => setNewFont(Font.SPACE_MONO)}>\r\n\t\t\t\t\t\t\t\tAa\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{/* COLOR */}\r\n\t\t\t\t\t<div className=\"settings__content__color\">\r\n\t\t\t\t\t\t<span className=\"settings__content__category--title\">COLOR</span>\r\n\t\t\t\t\t\t<div className=\"settings__content__color__content\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName={btnClassNameColor(Color.SALMON)}\r\n\t\t\t\t\t\t\t\tonClick={() => setNewColor(Color.SALMON)}></button>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName={btnClassNameColor(Color.CYAN)}\r\n\t\t\t\t\t\t\t\tonClick={() => setNewColor(Color.CYAN)}></button>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName={btnClassNameColor(Color.PURPLE)}\r\n\t\t\t\t\t\t\t\tonClick={() => setNewColor(Color.PURPLE)}></button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{/* APPLY */}\r\n\t\t\t\t\t<div className=\"settings__content__apply\">\r\n\t\t\t\t\t\t<button onClick={handleApply}>Apply</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Settings;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Count } from '../types/types';\r\nimport { Mode } from '../types/enum';\r\ninterface IProps {\r\n\ttimer: Count;\r\n\tcurrentMode: Mode;\r\n}\r\n\r\nconst Timer = ({ timer, currentMode }: IProps) => {\r\n\t// let time = timer * 60;\r\n\r\n\tconst refCount = useRef<any>(null);\r\n\tlet minutes = timer.pomodoro;\r\n\tlet secondes = 0;\r\n\r\n\tconst timerCurrent = () => {\r\n\t\tif (currentMode === 0) {\r\n\t\t\t// time = timer.pomodoro * 60;\r\n\t\t\tlet seconds = 0;\r\n\r\n\t\t\tconsole.log(minutes);\r\n\r\n\t\t\treturn `${minutes}`;\r\n\t\t}\r\n\t\tif (currentMode === 1) return timer.shortBreak;\r\n\t\tif (currentMode === 2) return timer.longBreak;\r\n\t};\r\n\r\n\t// useEffect(() => {\r\n\t// \t// window.setInterval(() => {\r\n\t// \t// \ttimer.pomodoro--;\r\n\t// \t// \tconsole.log(timer.pomodoro);\r\n\t// \t// });\r\n\t// });\r\n\r\n\t// const handleStartCount = () => {};\r\n\r\n\t// window.setInterval(() => {\r\n\t// \ttimer.pomodoro--;\r\n\t// \tconsole.log(timer.pomodoro);\r\n\t// }, 1000);\r\n\r\n\treturn (\r\n\t\t<button className=\"timer\">\r\n\t\t\t<svg>\r\n\t\t\t\t<circle\r\n\t\t\t\t\tcx=\"50%\"\r\n\t\t\t\t\tcy=\"50%\"\r\n\t\t\t\t\tr=\"170\"\r\n\t\t\t\t\tstrokeDasharray=\"1164\"\r\n\t\t\t\t\tstrokeDashoffset=\"0\"\r\n\t\t\t\t/>\r\n\t\t\t</svg>\r\n\t\t\t<div className=\"timer__content\">\r\n\t\t\t\t<span ref={refCount} className=\"timer__content__count\">\r\n\t\t\t\t\t{timer.pomodoro}\r\n\t\t\t\t</span>\r\n\t\t\t\t<span className=\"timer__content__action\">PAUSE</span>\r\n\t\t\t</div>\r\n\t\t</button>\r\n\t);\r\n};\r\nexport default Timer;\r\n","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Settings from './components/Settings';\nimport Timer from './components/Timer';\nimport { Color, Font, Mode } from './types/enum';\nimport { Count } from './types/types';\n\nfunction App() {\n\tconst htmlTag: any | string = document.body.parentNode;\n\tconst [currentMode, setCurrentMode] = useState(Mode.POMODORO);\n\tconst [currentFont, setCurrentFont] = useState(Font.KUMHB_SANS);\n\tconst [currentColor, setCurrentColor] = useState(Color.SALMON);\n\tconst [timer, setTimer] = useState<Count>({\n\t\tpomodoro: 10,\n\t\tshortBreak: 5,\n\t\tlongBreak: 15,\n\t});\n\n\tuseEffect(() => {\n\t\thtmlTag.setAttribute('data-font', currentFont);\n\t\thtmlTag.setAttribute('data-color', currentColor);\n\t}, [htmlTag, currentFont, currentColor]);\n\n\tconsole.log(currentFont);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header currentMode={currentMode} setCurrentMode={setCurrentMode} />\n\t\t\t<Timer timer={timer} currentMode={currentMode} />\n\t\t\t<Settings\n\t\t\t\ttimer={timer}\n\t\t\t\tsetTimer={setTimer}\n\t\t\t\tcurrentFont={currentFont}\n\t\t\t\tsetCurrentFont={setCurrentFont}\n\t\t\t\tcurrentColor={currentColor}\n\t\t\t\tsetCurrentColor={setCurrentColor}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/settings/styles.scss';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}